var SPREADSHEET_ID=SpreadsheetApp.getActiveSpreadsheet().getId();
var DOMAIN = Session.getEffectiveUser().getEmail().split("@")[1];
var SHEET_NAME = 'SHARED_CONTACTS';
var ERROR_RECIPIENT_MAIL= Session.getEffectiveUser().getEmail();
var HIGHEST_BOUNDARY,LOWEST_BOUNDARY,ERROR_COUNT='';

function onInstall(e) {
  onOpen(e);
}

function onOpen(e){
  SpreadsheetApp.getUi()
      .createAddonMenu()
      .addItem('Get contacts', 'getAllContacts')
      .addItem('Apply changes','syncContacts')
      .addToUi();
}

function syncContacts(){
  var maxRows =  SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getLastRow();
  if (maxRows<=2) {
    Logger.log("NO DATA TO PROCESS.");
  }
  else{
    if (maxRows<=102){
      HIGHEST_BOUNDARY=maxRows;
      LOWEST_BOUNDARY=3;
      var range = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getRange(3, 1, maxRows*1-2, 15).getValues();
      for (var i=0;i<range.length;i++){
        switch (range[i][13]){
          case 'ADD':
            addContact(range[i][0],range[i][1],range[i][2],range[i][3],range[i][4],range[i][5],range[i][6],range[i][7],range[i][8],range[i][9],range[i][10],range[i][11],i*1+3);
            break;
          case 'UPDATE':
            updateContact(range[i][0],range[i][1],range[i][2],range[i][3],range[i][4],range[i][5],range[i][6],range[i][7],range[i][8],range[i][9],range[i][10],range[i][11],range[i][12],i*1+3);
            break;
          case 'DELETE':
            deleteContact(range[i][12],i*1+3);
            break;
        }
            
      }
    }
      else{
        HIGHEST_BOUNDARY=102;
        LOWEST_BOUNDARY=3;
        var range = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getRange(3, 1, maxRows*1-2, 15).getValues();
        for (var i=0;i<99;i++){
          switch (range[i][13]){
          case 'ADD':
            addContact(range[i][0],range[i][1],range[i][2],range[i][3],range[i][4],range[i][5],range[i][6],range[i][7],range[i][8],range[i][9],range[i][10],range[i][11],i*1+3);
            break;
          case 'UPDATE':
            updateContact(range[i][0],range[i][1],range[i][2],range[i][3],range[i][4],range[i][5],range[i][6],range[i][7],range[i][8],range[i][9],range[i][10],range[i][11],range[i][12],i*1+3);
            break;
          case 'DELETE':
            deleteContact(range[i][12],i*1+3);
            break;
        }
        
      }
    }
  }
  
  if (ERROR_COUNT==''){
    SpreadsheetApp.getActiveSpreadsheet().toast('All operations have been successful.');
  }
  else{
    SpreadsheetApp.getActiveSpreadsheet().toast('There were some errors while processing the request.');
    
  }
}


function addContact(firstName,lastName,fullName,primaryEmail,secondaryEmail,primaryPhone,secondaryPhone,city,street,region,postcode,country,rowNumber) {
  
  var buildXML = "<atom:entry xmlns:atom='http://www.w3.org/2005/Atom' xmlns:gd='http://schemas.google.com/g/2005'>"+
                 "<atom:category scheme='http://schemas.google.com/g/2005#kind'    term='http://schemas.google.com/contact/2008#contact' />"+
	             "<gd:name>"+
		              "<gd:givenName>"+firstName+"</gd:givenName>"+
		              "<gd:familyName>"+lastName+"</gd:familyName>"+
		               "<gd:fullName>"+fullName+"</gd:fullName>"+
	             "</gd:name>"+
	"<atom:content type='text'>Notes</atom:content>"+
	"<gd:email rel='http://schemas.google.com/g/2005#work'    primary='true'    address='"+primaryEmail+"' displayName='"+firstName+" "+lastName+"' />"+
    "<gd:email rel='http://schemas.google.com/g/2005#home'    address='"+secondaryEmail+"' />"+
	"<gd:phoneNumber rel='http://schemas.google.com/g/2005#work'    primary='true'>"+primaryPhone+"</gd:phoneNumber>"+
	"<gd:phoneNumber rel='http://schemas.google.com/g/2005#home'>"+secondaryPhone+"</gd:phoneNumber>"+
	"<gd:im address='"+primaryEmail+"'    protocol='http://schemas.google.com/g/2005#GOOGLE_TALK'    primary='true'    rel='http://schemas.google.com/g/2005#home' />"+
	"<gd:structuredPostalAddress      rel='http://schemas.google.com/g/2005#work'      primary='true'>"+
		"<gd:city>"+city+"</gd:city>"+
		"<gd:street>"+street+"</gd:street>"+
		"<gd:region>"+region+"</gd:region>"+
		"<gd:postcode>"+postcode+"</gd:postcode>"+
		"<gd:country>"+country+"</gd:country>"+
		"<gd:formattedAddress>"+street+" "+city+"</gd:formattedAddress>"+
	"</gd:structuredPostalAddress>"+
    "</atom:entry>";
  
  var params = {
    method      : "post",
    contentType : "application/atom+xml",
    headers     : {"Authorization": "Bearer " + ScriptApp.getOAuthToken(),"GData-Version": "3.0"},
    payload: buildXML,
    muteHttpExceptions  : true
  };
  
  var resp = UrlFetchApp.fetch("https://www.google.com/m8/feeds/contacts/"+DOMAIN+"/full", params);
  
  var respCode=resp.getResponseCode();
  
  Logger.log(respCode);
  
  if (respCode=='201' || respCode=='200') {
    SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getRange(rowNumber*1, 15, 1, 1).setValue('OK');
  }
  else{
    SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getRange(rowNumber*1, 15, 1, 1).setValue('ERROR');
    ERROR_COUNT=ERROR_COUNT.toString()+rowNumber;
  }
}



function getAllContacts(){
  var contacts = ContactsApp.getContacts();
  
  var lastRow = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getLastRow();
  
  if (lastRow >2) SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).deleteRows(3, lastRow*1-2);
  
  var contacts = ContactsApp.getContacts();
  var params = {
    method      : "get",
    contentType : "application/atom+xml",
    headers     : {"Authorization": "Bearer " + ScriptApp.getOAuthToken(),"GData-Version": "3.0"},
    muteHttpExceptions  : true
  };
  
  var startIndex=1;
  var data,respCode,resp;
  resp = UrlFetchApp.fetch("https://www.google.com/m8/feeds/contacts/"+DOMAIN+"/full?alt=json&start-index="+startIndex, params);
  
  respCode=resp.getResponseCode();
  
  data = JSON.parse(resp.getContentText());
  
  while (data.feed){
  
  var contact={};
  var contactArray=[];
  
  for (var i in data.feed.entry){
    if (data.feed.entry[i].gd$name){
      if (data.feed.entry[i].gd$name.gd$givenName) {contact.firstName = data.feed.entry[i].gd$name.gd$givenName.$t;} else {contact.firstName=' ';}
      if (data.feed.entry[i].gd$name.gd$familyName) {contact.lastName = data.feed.entry[i].gd$name.gd$familyName.$t;} else {contact.lastName=' ';}
      if (data.feed.entry[i].gd$name.gd$fullName) {contact.fullName = data.feed.entry[i].gd$name.gd$fullName.$t;} else {contact.fullName= ' ';}
    }
    
    if (data.feed.entry[i].gd$email){
      if (data.feed.entry[i].gd$email[0]) {contact.primaryEmail = data.feed.entry[i].gd$email[0].address;} else {contact.primaryEmail=' ';}
      if (data.feed.entry[i].gd$email[1]) {contact.secondaryEmail = data.feed.entry[i].gd$email[1].address;} else {contact.secondaryEmail=' ';}
    }
    
    if (data.feed.entry[i].gd$phoneNumber){
      if (data.feed.entry[i].gd$phoneNumber[0]) {contact.primaryPhone = data.feed.entry[i].gd$phoneNumber[0].$t;} else {contact.primaryPhone=' ';}
      if (data.feed.entry[i].gd$phoneNumber[1]) {contact.secondaryPhone = data.feed.entry[i].gd$phoneNumber[1].$t;} else {contact.secondaryPhone=' ';}
    }
    
    if (data.feed.entry[i].gd$structuredPostalAddress){
      if (data.feed.entry[i].gd$structuredPostalAddress[0].gd$city) {contact.city = data.feed.entry[i].gd$structuredPostalAddress[0].gd$city.$t;} else {contact.city=' ';}
      if (data.feed.entry[i].gd$structuredPostalAddress[0].gd$street) {contact.street = data.feed.entry[i].gd$structuredPostalAddress[0].gd$street.$t;} else {contact.street=' ';}
      if (data.feed.entry[i].gd$structuredPostalAddress[0].gd$region) {contact.region = data.feed.entry[i].gd$structuredPostalAddress[0].gd$region.$t;} else {contact.region=' ';}
      if (data.feed.entry[i].gd$structuredPostalAddress[0].gd$postcode) {contact.postCode = data.feed.entry[i].gd$structuredPostalAddress[0].gd$postcode.$t;} else {contact.postCode=' ';}
      if (data.feed.entry[i].gd$structuredPostalAddress[0].gd$country) {contact.country = data.feed.entry[i].gd$structuredPostalAddress[0].gd$country.$t;} else {contact.country=' ';}
    }
    
    for (var q in data.feed.entry[i].link){
      if (data.feed.entry[i].link[q].rel=='edit') contact.id = data.feed.entry[i].link[q].href;
    
    }
    
    
    SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).appendRow([
      contact.firstName,
      contact.lastName,
      contact.fullName,
      contact.primaryEmail,
      contact.secondaryEmail,
      '="'+contact.primaryPhone+'"',
      '="'+contact.secondaryPhone+'"',
      contact.city,
      contact.street,
      contact.region,
      contact.postCode,
      contact.country,
      contact.id
      ]);
    
  
    
  }
    startIndex=startIndex*1+25;
    resp = UrlFetchApp.fetch("https://www.google.com/m8/feeds/contacts/"+DOMAIN+"/full?alt=json&start-index="+startIndex, params);
    respCode=resp.getResponseCode();
  
    data = JSON.parse(resp.getContentText());
  }
}

function updateContact(firstName,lastName,fullName,primaryEmail,secondaryEmail,primaryPhone,secondaryPhone,city,street,region,postcode,country,contactID,rowNumber) {
  
  var buildXML = "<atom:entry xmlns:atom='http://www.w3.org/2005/Atom' xmlns:gd='http://schemas.google.com/g/2005'>"+
                 "<atom:category scheme='http://schemas.google.com/g/2005#kind'    term='http://schemas.google.com/contact/2008#contact' />"+
                 "<id>"+contactID+"</id>"+
	             "<gd:name>"+
		              "<gd:givenName>"+firstName+"</gd:givenName>"+
		              "<gd:familyName>"+lastName+"</gd:familyName>"+
		               "<gd:fullName>"+fullName+"</gd:fullName>"+
	             "</gd:name>"+
	"<atom:content type='text'>Notes</atom:content>"+
	"<gd:email rel='http://schemas.google.com/g/2005#work'    primary='true'    address='"+primaryEmail+"' displayName='"+firstName+" "+lastName+"' />"+
    "<gd:email rel='http://schemas.google.com/g/2005#home'    address='"+secondaryEmail+"' />"+
	"<gd:phoneNumber rel='http://schemas.google.com/g/2005#work'    primary='true'>"+primaryPhone+"</gd:phoneNumber>"+
	"<gd:phoneNumber rel='http://schemas.google.com/g/2005#home'>"+secondaryPhone+"</gd:phoneNumber>"+
	"<gd:im address='"+primaryEmail+"'    protocol='http://schemas.google.com/g/2005#GOOGLE_TALK'    primary='true'    rel='http://schemas.google.com/g/2005#home' />"+
	"<gd:structuredPostalAddress      rel='http://schemas.google.com/g/2005#work'      primary='true'>"+
		"<gd:city>"+city+"</gd:city>"+
		"<gd:street>"+street+"</gd:street>"+
		"<gd:region>"+region+"</gd:region>"+
		"<gd:postcode>"+postcode+"</gd:postcode>"+
		"<gd:country>"+country+"</gd:country>"+
		"<gd:formattedAddress>"+street+" "+city+"</gd:formattedAddress>"+
	"</gd:structuredPostalAddress>"+
    "</atom:entry>";
  
  var params = {
    method      : "put",
    contentType : "application/atom+xml",
    headers     : {"Authorization": "Bearer " + ScriptApp.getOAuthToken(),"GData-Version": "3.0","If-Match":"*"},
    payload: buildXML,
    muteHttpExceptions  : true
  };
  
  var resp = UrlFetchApp.fetch(contactID,params);
  
  var respCode=resp.getResponseCode();
  
  Logger.log(respCode);
  
  if (respCode=='201' || respCode=='200') {
    SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getRange(rowNumber*1, 15, 1, 1).setValue('OK');
  }
  else{
    SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getRange(rowNumber*1, 15, 1, 1).setValue('ERROR');
    ERROR_COUNT=ERROR_COUNT.toString()+rowNumber;
  }
  
}


function deleteContact(contactID,rowNumber){
  
  var params = {
    method      : "delete",
    contentType : "application/json",
    headers     : {"Authorization": "Bearer " + ScriptApp.getOAuthToken(),"GData-Version": "3.0","If-Match":"*"}
  };
  
  var resp = UrlFetchApp.fetch(contactID, params);
  
  var respCode=resp.getResponseCode();
  
  Logger.log(respCode);
  
  if (respCode=='201' || respCode=='200') {
    SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).deleteRow(rowNumber*1);
  }
  else{
    SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME).getRange(rowNumber*1, 15, 1, 1).setValue('ERROR');
    ERROR_COUNT=ERROR_COUNT.toString()+rowNumber;
  }
}
